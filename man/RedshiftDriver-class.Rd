% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/client.R
\docType{class}
\name{RedshiftDriver-class}
\alias{RedshiftDriver}
\alias{RedshiftDriver-class}
\title{Class to access Redshift database}
\description{
Class to access Redshift database
}
\section{Fields}{

\describe{
\item{\code{conn}}{Database connection (JDBCConnection)}

\item{\code{schema}}{Current database schema}
}}
\section{Methods}{

\describe{
\item{\code{columnTypes(tableName)}}{Get list of columns in table and their datatypes.
\subsection{Parameters}{\itemize{
\item{\code{tableName} Name of the table (without schema).}
}}
\subsection{Return Value}{Named vector, name is column name, value is datatype.}}

\item{\code{connect(host, db, user, password, schema, port = 5439)}}{Connect to Amazon Redshift database.
\subsection{Parameters}{\itemize{
\item{\code{jdbcUrl} JDBC connection string.}
\item{\code{username} Database user name.}
\item{\code{password} Database password.}
\item{\code{schema} Database schema.}
}}
\subsection{Return Value}{TRUE}}

\item{\code{fetch(statement, maxmem = 5e+08, chunksize = -1)}}{Select via JDBC result set fetching to avoid memory restraints.
\subsection{Parameters}{\itemize{
\item{\code{statement} Prepared Query statement.}
\item{\code{maxmem} Upper limit in bytes of read - default 500MB.}
\item{\code{chunksize} Rows to return per fetch - default 32k for 1st fetch, then 512k.}
}}
\subsection{Return Value}{A data.frame with results}}

\item{\code{prepareStatement(sql, ...)}}{Prepare a SQL query with quoted parameters.
\subsection{Parameters}{\itemize{
\item{\code{sql} SQL string, parameter placeholders are marked with ?.}
\item{\code{...} Query parameters, number of parameters must be same as number of question marks.}
}}
\subsection{Return Value}{SQL string}}

\item{\code{saveDataFrame(dfRaw, table, rowNumbers = FALSE, incremental = FALSE,
  forcedColumnTypes)}}{Save a dataframe to database using bulk inserts. The table will be created to accomodate to data frame columns.
\subsection{Parameters}{\itemize{
\item{\code{dfRaw} A data.frame, column names of data frame must correspond to column names of table.}
\item{\code{table} Name of the table.}
\item{\code{rowNumbers} If true then the table will contain a column named 'row_num' with sequential row index}
\item{\code{incremental} If true then the table will not be recreated, only data will be inserted.}
\item{\code{forcedColumnTypes} List of column names and their respective types in database.}
}}
\subsection{Return Value}{TRUE}}

\item{\code{select(sql, ...)}}{Select data from database.
\subsection{Parameters}{\itemize{
\item{\code{sql} Query string, may contain placeholders ? for parameters.}
\item{\code{...} Query parameters, number of parameters must be same as number of question marks.}
}}
\subsection{Return Value}{A data.frame with results}}

\item{\code{tableExists(tableName)}}{Verify that a table exists in database.
\subsection{Parameters}{\itemize{
\item{\code{tableName} Name of the table (without schema).}
}}
\subsection{Return Value}{TRUE if the table exists, FALSE otherwise.}}

\item{\code{update(sql, ...)}}{Update/Insert data to database.
\subsection{Parameters}{\itemize{
\item{\code{sql} Query string, may contain placeholders ? for parameters.}
\item{\code{...} Query parameters.}
}}
\subsection{Return Value}{TRUE}}
}}

